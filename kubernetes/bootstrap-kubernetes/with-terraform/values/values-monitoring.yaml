---
alertmanager:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      certmanager.k8s.io/acme-http01-edit-in-place: "false"
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/auth-realm: Authentication Required
      nginx.ingress.kubernetes.io/auth-secret: alertmanager-auth
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/affinity: cookie
    hosts:
      - alertmanager.${main_domain}        # AlertManager Url
    ingressClassName: nginx
    tls:
      - secretName: alertmanager-general-tls
        hosts:
          - alertmanager.${main_domain}    # AlertManager Url for certificate

  alertmanagerSpec:                       # AlertManager PVC
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi

grafana:
  defaultDashboardsTimezone: Asia/Tehran
  adminPassword: ${grafana_password}       # Grafana admin user Password
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      certmanager.k8s.io/acme-http01-edit-in-place: "false"
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - grafana.${main_domain}                 # Grafana Url
    ingressClassName: nginx
    tls:
      - secretName: grafana-general-tls
        hosts:
          - grafana.${main_domain}             # Grafana Url for Certificate
  persistence:                                # Grafana PVC
    type: pvc
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    finalizers:
      - kubernetes.io/pvc-protection

kubeControllerManager:
  service:
    port: 10257
    targetPort: 10257
  serviceMonitor:
    https: true
    insecureSkipVerify: true

kubeEtcd:
  enabled: false
  serviceMonitor:
    enabled: true
    scheme: http
    insecureSkipVerify: false
    serverName: localhost
    caFile: /etc/prometheus/secrets/etcd-client-cert/etcd-ca
    certFile: /etc/prometheus/secrets/etcd-client-cert/etcd-client
    keyFile: /etc/prometheus/secrets/etcd-client-cert/etcd-client-key
  service:
    enabled: true
    port: 2381
    targetPort: 2381

kubeScheduler:
  service:
    port: 10259
    targetPort: 10259
  serviceMonitor:
    https: true
    insecureSkipVerify: true

kubeProxy:
  service:
    port: 10249
    targetPort: 10249

kubelet:
  enabled: true
  namespace: kube-system

prometheus:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      certmanager.k8s.io/acme-http01-edit-in-place: "false"
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/auth-realm: Authentication Required
      nginx.ingress.kubernetes.io/auth-secret: prometheus-auth
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/affinity: cookie
    hosts:
      - prometheus.${main_domain}                # Prometheus Url
    ingressClassName: nginx
    tls:
      - secretName: prometheus-general-tls
        hosts:
          - prometheus.${main_domain}             # Prometheus Url for certificate

  prometheusSpec:                                # Prometheus PVC
    retention: 15d
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    resources:
      limits:
        cpu: 1500m
        memory: 15Gi
      requests:
        cpu: 500m
        memory: 5Gi
    #secrets:
    #  - etcd-client-cert

